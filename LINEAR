%% Tyler White and Keeler Tardiff Case Study 2
%% Glucose-Insulin Dynamics: State Feedback with Luenberger Observer
%% Linearized simulations and robustness check
%given params
p1_values = [0.0255, 0.03, 0.0345]; 
p2_values = [0.017, 0.02, 0.023]; 
p3_values = [0.0085, 0.01, 0.0115]; 
n = 0.1; 
Gb = 100; 
Ib = 10; 


u_basal = n * Ib;


B = [0; 0; 1]; 
E = [1; 0; 0]; 
C = [1 0 0]; 


tfinal = 1440; % 24 hours in minutes
tspan = [0 tfinal];

x0 = [0; 0; 0]; % start states at equilibrium because the linearization is
%around baseline levels
xhat0 = [0; 0; 0]; 
z0 = [x0; xhat0]; 

% Desired Poles
desired_poles_controller = [-0.05; -0.06; -0.08];
desired_poles_observer = [-0.1; -0.12; -0.15];

%% Parameter Testing Loop
param_set = 1;

D_random = create_D_random(tfinal); %generate random D(t)

for i = 1:length(p1_values)
    for j = 1:length(p2_values)
        for k = 1:length(p3_values)
            % Set parameters
            p1 = p1_values(i);
            p2 = p2_values(j);
            p3 = p3_values(k);

            % Update A matrix
            A = [-p1, -Gb, 0;
                 0, -p2, p3;
                 0, 0, -n];

            % Redesign K and L with the updated A matrix
            K = place(A, B, desired_poles_controller);
            L = place(A', C', desired_poles_observer)';

            %% Simulate Each Disturbance
            [time_sin, Z_sin] = ode45(@(t, z) closed_loop_ode(t, z, A, B, C, E, K, L, Gb, u_basal, @D_sin), tspan, z0);
            X_sin = Z_sin(:, 2); 
            G_sin = Z_sin(:, 1) + Gb; 
            I_sin = Z_sin(:, 3) + Ib;
            U_sin = u_basal - (K * Z_sin(:, 4:6)')'; 
            D_sin_signal = arrayfun(@D_sin, time_sin);

            
            [time_square, Z_square] = ode45(@(t, z) closed_loop_ode(t, z, A, B, C, E, K, L, Gb, u_basal, @D_square), tspan, z0);
            X_square = Z_square(:, 2); 
            G_square = Z_square(:, 1) + Gb; 
            I_square = Z_square(:,3) + Ib;
            U_square = u_basal - (K * Z_square(:, 4:6)')'; 
            D_square_signal = arrayfun(@D_square, time_square);

            [time_random, Z_random] = ode45(@(t, z) closed_loop_ode(t, z, A, B, C, E, K, L, Gb, u_basal, D_random), tspan, z0);
            X_random = Z_random(:, 2); 
            G_random = Z_random(:, 1) + Gb; 
            I_random = Z_random(:,3) + Ib;
            U_random = u_basal - (K * Z_random(:, 4:6)')'; 
            D_random_signal = arrayfun(D_random, time_random);

            %% Plot Results for Different Disturbances
            figure('Name', sprintf('Parameter Set %d: p1=%.4f, p2=%.4f, p3=%.4f', param_set, p1, p2, p3));
            sgtitle("Linearized Control System Robustness Check")
            
            subplot(4, 3, 1);
            plot(time_sin, G_sin, 'b', 'LineWidth', 2);
            ylabel("Glucose (mg/dL)");
            title("D(t): Mod Sine Wave");

            
            subplot(4, 3, 4);
            plot(time_sin, X_sin, 'LineWidth', 2);
            ylabel('Insulin Action (1/min)');
            
            subplot(4, 3, 7);
            plot(time_sin, I_sin, 'r', 'LineWidth', 2);
            ylabel('Plasma Insulin Action (mU/L)');

            subplot(4, 3, 10);
            plot(time_sin, D_sin_signal, 'g', 'LineWidth', 2);
            ylabel('Exogenous Glucose (mg/dL/min)');

            
            
            subplot(4, 3, 2);
            plot(time_square, G_square, 'b', 'LineWidth', 2);
            title("D(t): Square Wave");

            
            subplot(4, 3, 5);
            plot(time_square, X_square, 'LineWidth', 2);

            
            subplot(4, 3, 8);
            plot(time_square, I_square, 'r', 'LineWidth', 2);


            subplot(4, 3, 11);
            plot(time_square, D_square_signal, 'g', 'LineWidth', 2);

            subplot(4, 3, 3);
            plot(time_random, G_random, 'b', 'LineWidth', 2);
            title("D(t): Random Input");

            
            subplot(4, 3, 6);
            plot(time_random, X_random, 'LineWidth', 2);

            
            subplot(4, 3, 9);
            plot(time_random, I_random, 'r', 'LineWidth', 2);


            subplot(4, 3, 12);
            plot(time_random, D_random_signal, 'g', 'LineWidth', 2);
            

            han = axes('Visible', 'off'); 
            han.Title.Visible = 'on';
            han.XLabel.Visible = 'on';
            han.YLabel.Visible = 'on';

            xlabel(han, 'Time (min)');

            
            param_set = param_set + 1;
        end
    end
end


%% Nested Functions
%linearized ODE version. Uses our linearized A
function dz = closed_loop_ode(t, z, A, B, C, E, K, L, Gb, u_basal, D_func)
    x = z(1:3);
    x_hat = z(4:6);

    D_val = D_func(t);

    y = C * x + Gb;

    u_pid = -K * x_hat;
    u = u_basal + u_pid; 

    dx = A * x + B * (u - u_basal) + E * D_val;
    
    %observer/controller equation
    dx_hat = A * x_hat + B * (u - u_basal) + L * (y - (C * x_hat + Gb));

    dz = [dx; dx_hat];
end

%%Meal disturbances
function D_val = D_sin(t)
    period = 360;
    meal_duration = 30;
    D_amplitude = 2; 
    time_in_period = mod(t, period);
    if time_in_period < meal_duration
       D_val = D_amplitude * sin(pi * time_in_period / meal_duration)^2;
    else
        D_val = 0;
    end
end

function D_val = D_square(t)
    period = 360; 
    meal_duration = 30; 
    D_amplitude = 2; 
    time_in_period = mod(t, period); 
    if time_in_period < meal_duration
        D_val = D_amplitude;
    else
        D_val = 0; 
    end
end

%Random D(t) function as defined in nonlinear version
function D_func = create_D_random(tfinal)
    num_disturbances = randi([1, 10]); 
    amplitudes = 2 * rand(1, num_disturbances); 
    start_times = sort(rand(1, num_disturbances) * tfinal); 
    durations = randi([10, 60], 1, num_disturbances); 
    
    
    D_func = @(t) compute_disturbance(t, start_times, durations, amplitudes);
end

function D_val = compute_disturbance(t, start_times, durations, amplitudes)
    
    D_val = 0;
    for i = 1:length(start_times)
        if t >= start_times(i) && t < start_times(i) + durations(i)
            D_val = amplitudes(i);
            break;
        end
    end
end
