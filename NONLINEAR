%% Tyler White and Keeler Tardiff Case Study 2
%% Glucose-Insulin Dynamics: State Feedback with Luenberger Observer
%% Nonlinear simulations and robustness check
clear; clc; close all;

%given parameters
p1_values = [0.0255, 0.03, 0.0345]; 
p2_values = [0.017, 0.02, 0.023]; 
p3_values = [0.0085, 0.01, 0.0115]; 
n = 0.1; 
Gb = 100; 
Ib = 10; 



% Basal insulin infusion to keep I=Ib at steady state
% This maintains homestasis in the patient, ensuring the system does
% not become unstable
u_basal = n * Ib;

B = [0; 0; 1]; 
E = [1; 0; 0]; %For d(t)
C = [1 0 0]; 

tfinal = 1440; % 24 hours in minutes
tspan = [0 tfinal];

% Initial states:
x0 = [Gb; 0; Ib]; % start at baseline for nonlinear
xhat0 = [0; 0; 0]; % observer starts with no initial state knowledge error
z0 = [x0; xhat0]; % augmented state

%Can still assign poles despite being nonlinear, but it may be effected by
%nonlinearities
desired_poles_controller = [-0.05; -0.06; -0.08];
desired_poles_observer = [-0.1; -0.12; -0.15];

%% Sample Frequency analysis
A = [-p1_values(2), -Gb, 0; %avg vals
     0, -p2_values(2), p3_values(2);
     0, 0, -n];
K = place(A, B, desired_poles_controller);
L = place(A', C', desired_poles_observer)';

%% Form Augmented System Matrices for Transfer Function
% Augment matrices to form the full state-space representation
A_aug = [A - B*K,        zeros(3,3);
         L*C,   A - B*K - L*C];


E_aug = [E; zeros(3,1)];
C_aug = [C, zeros(1,3)];

% Verify dimensions of augmented matrices
disp('Size of A_aug:'), disp(size(A_aug));
disp('Size of E_aug:'), disp(size(E_aug));
disp('Size of C_aug:'), disp(size(C_aug));

% Symbolic Transfer Function from D(t) to y(t) - Gb
syms s
A_aug_sym = sym(A_aug);
E_aug_sym = sym(E_aug);
C_aug_sym = sym(C_aug);

I_aug = eye(size(A_aug));  % Identity matrix
sI_aug = s * I_aug;

% Compute symbolic transfer function
inv_term = inv(sI_aug - A_aug_sym);  % (sI - A_aug)^(-1)
G_tf_sym = simplify(C_aug_sym * inv_term * E_aug_sym);

disp('Symbolic Transfer Function from D(t) to y(t)-Gb:');
pretty(G_tf_sym);  % Display symbolic transfer function in readable format

% For numeric analysis, convert to state-space object and display:
sys_aug = ss(A_aug, E_aug, C_aug, 0);
G_tf = tf(sys_aug);

disp('Numeric Transfer Function from D(t) to y(t)-Gb:');
G_tf


% State-space object for disturbance to output deviation (y-Gb)
sys = ss(A_aug, E_aug, C_aug, 0);  % D-matrix = 0

% Convert to transfer function:
G_tf = tf(sys);

figure;
bode(G_tf); % Plot the Bode diagram for the transfer function G_tf
grid on;    % Add grid for better visualization
title('Bode Plot of the System');

% Nyquist Plot
figure;
nyquist(G_tf); % Plot the Nyquist diagram for the transfer function G_tf
grid on;       % Add grid for better visualization
title('Nyquist Plot of the System');

%% Parameter Testing Loop

D_random = create_D_random(tfinal); %%generate random disturbance
%to avoid function call

param_set = 1;

for i = 1:length(p1_values)
    for j = 1:length(p2_values)
        for k = 1:length(p3_values)

            % Set parameters
            p1 = p1_values(i);
            p2 = p2_values(j);
            p3 = p3_values(k);

            % Update A matrix
            A = [-p1, -Gb, 0;
                 0, -p2, p3;
                 0, 0, -n];

            % Design K and L matrices for control and observer
            K = place(A, B, desired_poles_controller);
            L = place(A', C', desired_poles_observer)';

            % ode sims for each d(t)
            [time_sin, Z_sin] = ode45(@(t, z) nonlinear_closed_loop_ode(t, z, p1, p2, p3, n, Gb, Ib, u_basal, A, B, C, K, L, @D_sin), tspan, z0);
            [time_square, Z_square] = ode45(@(t, z) nonlinear_closed_loop_ode(t, z, p1, p2, p3, n, Gb, Ib, u_basal, A, B, C, K, L, @D_square), tspan, z0);
            [time_random, Z_random] = ode45(@(t, z) nonlinear_closed_loop_ode(t, z, p1, p2, p3, n, Gb, Ib, u_basal, A, B, C, K, L, D_random), tspan, z0);


            % extract states and observer estimates for each d(t)
            G_sin = Z_sin(:, 1); 
            X_sin = Z_sin(:, 2);
            I_sin = Z_sin(:, 3);
            xhat_sin = Z_sin(:, 4:6); 
            U_sin = u_basal -(K*xhat_sin')';
            D_sin_signal = arrayfun(@D_sin, time_sin);

            
            G_square = Z_square(:, 1); 
            X_square = Z_square(:, 2); 
            I_square = Z_square(:, 3);
            xhat_square = Z_square(:, 4:6); 
            U_square = u_basal -(K*xhat_square')';
            D_square_signal = arrayfun(@D_square, time_square);


            
            G_random = Z_random(:, 1); 
            X_random = Z_random(:, 2); 
            I_random = Z_random(:, 3);
            xhat_random = Z_random(:, 4:6); 
            U_random = u_basal -(K*xhat_random')';
            D_random_signal = arrayfun(D_random, time_random);


            %plotting every state for each d(t) and each p value
            
            figure('Name', sprintf('Parameter Set %d: p1=%.4f, p2=%.4f, p3=%.4f', param_set, p1, p2, p3));
            sgtitle("Nonlinear Control System Robustness Check", 'fontsize', 20)
            % Glucose response
            subplot(4, 3, 1);
            plot(time_sin, G_sin, 'b', 'LineWidth', 2);
            title("D(t): Mod Sine Wave", 'FontSize', 20);
            legend('Glucose Response(mg/dL)', 'fontsize', 20);  % Add legend here



            % Insulin action
            subplot(4, 3, 4);
            plot(time_sin, X_sin, 'LineWidth', 2);
            legend('Insulin Action(/min)', 'fontsize', 20 );  % Add legend here



            % Insulin Concentration
            subplot(4, 3, 7);
            plot(time_sin, I_sin, 'r', 'LineWidth', 2);
            legend('Plasma Insulin Action (mU/L)', 'fontsize', 20 );  % Add legend here


            %External glucose intake
            subplot(4, 3, 10);
            plot(time_sin, D_sin_signal, 'g', 'LineWidth', 2);
            legend('Exogenous Glucose (mg/dL/min)', 'fontsize', 20 );  % Add legend here
 

            subplot(4, 3, 2);
            plot(time_square, G_square, 'b', 'LineWidth', 2);
            title("D(t): Square Wave", 'FontSize', 20 );



            subplot(4, 3, 5);
            plot(time_square, X_square, 'LineWidth', 2);


            subplot(4, 3, 8);
            plot(time_square, I_square, 'r', 'LineWidth', 2);


            subplot(4, 3, 11);
            plot(time_square, D_square_signal, 'g', 'LineWidth', 2);
            
            subplot(4, 3, 3);
            plot(time_random, G_random, 'b', 'LineWidth', 2);
            title("D(t): Random Input", 'FontSize', 20 );


            subplot(4, 3, 6);
            plot(time_random, X_random, 'LineWidth', 2);


            subplot(4, 3, 9);
            plot(time_random, I_random, 'r', 'LineWidth', 2);


            subplot(4, 3, 12);
            plot(time_random, D_random_signal, 'g', 'LineWidth', 2);


            % Increment parameter set index
            param_set = param_set + 1;

            han = axes('Visible', 'off'); % Create an invisible axis for labels
            han.Title.Visible = 'on';
            han.XLabel.Visible = 'on';
            han.YLabel.Visible = 'on';

            xlabel(han, 'Time (min)');

        end
    end
end

%% Nested Functions
%nonlinear system given in pdf
function dz = nonlinear_closed_loop_ode(t,z,p1,p2,p3,n,Gb,Ib,u_basal,A,B,C,K,L,D_func)

    G = z(1);
    X = z(2);
    I = z(3);
    xhat = z(4:6);

    D_val = D_func(t);

    y = G; % measured output is glucose directly

    % compute control input from observer
    u_pid = -K*xhat;
    u = u_basal + u_pid;

    % plant dynamics
    dGdt = -p1*(G - Gb) - X*G + D_val;
    dXdt = -p2*X + p3*(I - Ib);
    dIdt = -n*I + u;

    dx = [dGdt; dXdt; dIdt];

    % deviation from acutal state
    x_dev = [G - Gb; X; I - Ib];
    y_dev = y - Gb; 

    dxhat = A*xhat + B*(u - u_basal) + L*(y_dev - (C*xhat));

    dz = [dx; dxhat];
end

function D_val = D_sin(t)
    % A simple meal disturbance every 240 min lasting 30 min. This one is
    % based sinusoidally, with a similar structure to a triangular pulse
    period = 360;
    meal_duration = 30;
    D_amplitude = 2; 
    time_in_period = mod(t, period);
    if time_in_period < meal_duration
       D_val = D_amplitude * sin(pi * time_in_period / meal_duration)^2;
    else
        D_val = 0;
    end
end

function D_val = D_square(t)
    % A square wave meal disturbance every 360 min lasting 30 min
    period = 360; 
    meal_duration = 30; 
    D_amplitude = 2; 
    time_in_period = mod(t, period); 
    if time_in_period < meal_duration
        D_val = D_amplitude;
    else
        D_val = 0; 
    end
end

%% Random disturbance signal. Random in period, duration, and amplitude
function D_func = create_D_random(tfinal)
    num_disturbances = randi([1, 10]);
    amplitudes = 2 * rand(1, num_disturbances); 
    start_times = sort(rand(1, num_disturbances) * tfinal); 
    durations = randi([10, 60], 1, num_disturbances); 
    
    D_func = @(t) compute_disturbance(t, start_times, durations, amplitudes);
end

function D_val = compute_disturbance(t, start_times, durations, amplitudes)
    
    D_val = 0;
    for i = 1:length(start_times)
        if t >= start_times(i) && t < start_times(i) + durations(i)
            D_val = amplitudes(i);
            break; 
        end
    end
end
